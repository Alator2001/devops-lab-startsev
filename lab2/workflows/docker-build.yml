name: CI/CD Docker to Docker Hub

on:
  push:
    branches:
      - main
      - develop

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: my-flask-app
  REGISTRY: docker.io
  DOCKERHUB_USER: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (optional, for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Resolve tags by branch
        id: meta
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "tags=${IMAGE}:latest,${IMAGE}:sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
            echo "channel=production" >> $GITHUB_OUTPUT
          else
            # develop
            echo "tags=${IMAGE}:dev,${IMAGE}:sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
            echo "channel=development" >> $GITHUB_OUTPUT
          fi

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          provenance: false

      # "Деплой" как echo, различающийся по веткам
      - name: Deploy step (echo only)
        run: |
          if [ "${{ steps.meta.outputs.channel }}" = "production" ]; then
            echo "Deploying to production server..."
          else
            echo "Deploying to development server..."
          fi

      # Для наглядности — выводим где лежит образ
      - name: Print pushed tags
        run: |
          echo "Pushed tags: ${{ steps.meta.outputs.tags }}"
